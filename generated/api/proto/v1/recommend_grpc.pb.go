// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/v1/recommend.proto

package apiv1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecommendationClient is the client API for Recommendation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendationClient interface {
	// Поставить лайк категории.
	LikeCategory(ctx context.Context, in *CategoryActionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Снять лайк категории.
	UnlikeCategory(ctx context.Context, in *CategoryActionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type recommendationClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationClient(cc grpc.ClientConnInterface) RecommendationClient {
	return &recommendationClient{cc}
}

func (c *recommendationClient) LikeCategory(ctx context.Context, in *CategoryActionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.Recommendation/LikeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationClient) UnlikeCategory(ctx context.Context, in *CategoryActionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.Recommendation/UnlikeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServer is the server API for Recommendation service.
// All implementations should embed UnimplementedRecommendationServer
// for forward compatibility
type RecommendationServer interface {
	// Поставить лайк категории.
	LikeCategory(context.Context, *CategoryActionRequest) (*empty.Empty, error)
	// Снять лайк категории.
	UnlikeCategory(context.Context, *CategoryActionRequest) (*empty.Empty, error)
}

// UnimplementedRecommendationServer should be embedded to have forward compatible implementations.
type UnimplementedRecommendationServer struct {
}

func (UnimplementedRecommendationServer) LikeCategory(context.Context, *CategoryActionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeCategory not implemented")
}
func (UnimplementedRecommendationServer) UnlikeCategory(context.Context, *CategoryActionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeCategory not implemented")
}

// UnsafeRecommendationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationServer will
// result in compilation errors.
type UnsafeRecommendationServer interface {
	mustEmbedUnimplementedRecommendationServer()
}

func RegisterRecommendationServer(s grpc.ServiceRegistrar, srv RecommendationServer) {
	s.RegisterService(&Recommendation_ServiceDesc, srv)
}

func _Recommendation_LikeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServer).LikeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Recommendation/LikeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServer).LikeCategory(ctx, req.(*CategoryActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommendation_UnlikeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServer).UnlikeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Recommendation/UnlikeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServer).UnlikeCategory(ctx, req.(*CategoryActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recommendation_ServiceDesc is the grpc.ServiceDesc for Recommendation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recommendation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Recommendation",
	HandlerType: (*RecommendationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeCategory",
			Handler:    _Recommendation_LikeCategory_Handler,
		},
		{
			MethodName: "UnlikeCategory",
			Handler:    _Recommendation_UnlikeCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/recommend.proto",
}
